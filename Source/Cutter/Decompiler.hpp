/**
 * @file      : Decompiler.hpp
 * @author    : Siddharth Mishra
 * @date      : 28/01/2025
 * @copyright : Copyright (c) 2025 RevEngAI. All Rights Reserved.
 * */

#ifndef REAI_PLUGIN_CUTTER_DECOMPILER_HPP
#define REAI_PLUGIN_CUTTER_DECOMPILER_HPP

// Cutter's decompiler interface
#include <cutter/common/Decompiler.h>

class ReaiDecWorker;

/**
 * Cutter decompiler interface implementation for RevEngAI's
 * AI decompiler. This will send a decompilation request for
 * function at given address and return a decompiled response
 * generated by AI.
 * */
class ReaiDec : public Decompiler {
    std::atomic<bool> is_finished = true;

   public:
    ReaiDec (QObject *parent = nullptr);

    /**
     * Check whether the decompilation is finished. This will
     * make an API call to RevEngAI servers to check whether the decompilation
     * process is running on the server or not.
     * */
    bool isRunning() override;

    /**
     * Get's function at given address, gets corresponding function ID, and
     * then issues a decompilation request for function at given address.
     * */
    void decompileAt (RVA addr) override;

   private:
    void pollAndSignalFinished (RVA rva_addr);
    friend ReaiDecWorker;
};

#endif // REAI_PLUGIN_CUTTER_DECOMPILER_HPP
