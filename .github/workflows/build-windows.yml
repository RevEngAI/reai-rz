name: Build Windows

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Setup Visual Studio Developer Environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        
    - name: Build project with Python venv
      run: |
        # Run the build script which now handles venv setup internally
        Set-ExecutionPolicy Bypass -Scope Process -Force
        .\Scripts\Build.ps1
      shell: powershell
      
    - name: Collect runtime binaries
      run: |
        New-Item -ItemType Directory -Force -Path "artifacts"
        
        $InstallPath = "$env:USERPROFILE\.local\RevEngAI\Rizin\Install"
        
        Write-Host "=== Contents of Install Directory ==="
        if (Test-Path $InstallPath) {
          Get-ChildItem -Recurse $InstallPath | Select-Object -First 30 | ForEach-Object { Write-Host $_.FullName }
          
          Write-Host "`n=== Collecting Essential Files Only ==="
          
          # Collect reai.dll from bin directory (as per CMakeLists.txt RUNTIME DESTINATION bin)
          $ReaiDllPath = "$InstallPath\bin\reai.dll"
          if (Test-Path $ReaiDllPath) {
            Copy-Item $ReaiDllPath "artifacts\"
            Write-Host "✅ Collected: reai.dll from bin/"
          } else {
            Write-Host "❌ reai.dll NOT FOUND at $ReaiDllPath"
            # Fallback search
            $ReaiDll = Get-ChildItem -Recurse $InstallPath -Filter "reai.dll" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($ReaiDll) {
              Copy-Item $ReaiDll.FullName "artifacts\"
              Write-Host "✅ Collected: reai.dll from fallback search at $($ReaiDll.FullName)"
            }
          }
          
          # Collect reai.lib from lib directory (as per CMakeLists.txt ARCHIVE DESTINATION lib)
          $ReaiLibPath = "$InstallPath\lib\reai.lib"
          if (Test-Path $ReaiLibPath) {
            Copy-Item $ReaiLibPath "artifacts\"
            Write-Host "✅ Collected: reai.lib from lib/"
          } else {
            Write-Host "❌ reai.lib NOT FOUND at $ReaiLibPath"
            # Fallback search
            $ReaiLib = Get-ChildItem -Recurse $InstallPath -Filter "reai.lib" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($ReaiLib) {
              Copy-Item $ReaiLib.FullName "artifacts\"
              Write-Host "✅ Collected: reai.lib from fallback search at $($ReaiLib.FullName)"
            }
          }
          
          # Look for rizin plugin using rizin command to get actual plugin directory
          Write-Host "`n=== Looking for reai_rizin plugin ==="
          $RizinPluginFound = $false
          
          # Try to get plugin directory from rizin (as done in CMakeLists.txt)
          try {
            $RizinCmd = "$InstallPath\bin\rizin.exe"
            if (Test-Path $RizinCmd) {
              $RizinPluginDir = & $RizinCmd -H RZ_USER_PLUGINS 2>$null
              if ($RizinPluginDir -and (Test-Path $RizinPluginDir)) {
                Write-Host "Rizin reports plugin directory: $RizinPluginDir"
                $RizinPlugin = Get-ChildItem $RizinPluginDir -Filter "*reai_rizin*" -ErrorAction SilentlyContinue | Select-Object -First 1
                if ($RizinPlugin) {
                  Copy-Item $RizinPlugin.FullName "artifacts\"
                  Write-Host "✅ Collected rizin plugin: $($RizinPlugin.Name) from $RizinPluginDir"
                  $RizinPluginFound = $true
                } else {
                  Write-Host "No reai_rizin plugin found in reported directory: $RizinPluginDir"
                }
              } else {
                Write-Host "Rizin plugin directory not accessible or empty: $RizinPluginDir"
              }
            } else {
              Write-Host "Rizin executable not found at: $RizinCmd"
            }
          } catch {
            Write-Host "Could not get plugin directory from rizin command: $($_.Exception.Message)"
          }
          
          # Additional search locations for rizin plugin if not found
          if (-not $RizinPluginFound) {
            Write-Host "Searching additional locations for reai_rizin plugin..."
            $AdditionalRizinDirs = @(
              "$InstallPath\lib\rizin\plugins",
              "$InstallPath\share\rizin\plugins", 
              "$env:APPDATA\rizin\plugins",
              "$env:LOCALAPPDATA\rizin\plugins"
            )
            
            foreach ($RizinDir in $AdditionalRizinDirs) {
              if (Test-Path $RizinDir) {
                Write-Host "Checking: $RizinDir"
                $RizinPlugin = Get-ChildItem $RizinDir -Filter "*reai_rizin*" -ErrorAction SilentlyContinue | Select-Object -First 1
                if ($RizinPlugin) {
                  Copy-Item $RizinPlugin.FullName "artifacts\"
                  Write-Host "✅ Collected rizin plugin: $($RizinPlugin.Name) from $RizinDir"
                  $RizinPluginFound = $true
                  break
                }
              }
            }
          }
          
          # Final fallback: search entire install path for rizin plugin
          if (-not $RizinPluginFound) {
            Write-Host "Searching entire install path for reai_rizin plugin..."
            $RizinPlugin = Get-ChildItem -Recurse $InstallPath -Filter "*reai_rizin*" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($RizinPlugin) {
              Copy-Item $RizinPlugin.FullName "artifacts\"
              Write-Host "✅ Collected rizin plugin from install path: $($RizinPlugin.Name) at $($RizinPlugin.FullName)"
              $RizinPluginFound = $true
            } else {
              Write-Host "❌ reai_rizin plugin NOT FOUND anywhere in install path"
            }
          }
          
          # Look for cutter plugin using similar approach
          Write-Host "`n=== Looking for reai_cutter plugin ==="
          $CutterPluginFound = $false
          
          # Try common cutter plugin directories (based on Cutter_USER_PLUGINDIR)
          $CutterPluginDirs = @(
            "$InstallPath\lib\cutter\plugins",
            "$InstallPath\share\cutter\plugins", 
            "$env:APPDATA\cutter\plugins\native",
            "$env:LOCALAPPDATA\cutter\plugins\native",
            "$env:APPDATA\rizin\cutter\plugins\native",
            "$env:LOCALAPPDATA\rizin\cutter\plugins\native"
          )
          
          foreach ($CutterDir in $CutterPluginDirs) {
            if (Test-Path $CutterDir) {
              Write-Host "Checking: $CutterDir"
              $CutterPlugin = Get-ChildItem $CutterDir -Filter "*reai_cutter*" -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($CutterPlugin) {
                Copy-Item $CutterPlugin.FullName "artifacts\"
                Write-Host "✅ Collected cutter plugin: $($CutterPlugin.Name) from $CutterDir"
                $CutterPluginFound = $true
                break
              }
            }
          }
          
          # Search entire install path for cutter plugin if not found
          if (-not $CutterPluginFound) {
            Write-Host "Searching entire install path for reai_cutter plugin..."
            $CutterPlugin = Get-ChildItem -Recurse $InstallPath -Filter "*reai_cutter*" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($CutterPlugin) {
              Copy-Item $CutterPlugin.FullName "artifacts\"
              Write-Host "✅ Collected cutter plugin from install path: $($CutterPlugin.Name) at $($CutterPlugin.FullName)"
              $CutterPluginFound = $true
            } else {
              Write-Host "❌ reai_cutter plugin NOT FOUND anywhere in install path"
            }
          }
        } else {
          Write-Host "❌ Install path not found: $InstallPath"
        }
        
        Write-Host "`n=== Final Essential Files ==="
        $files = Get-ChildItem "artifacts" -ErrorAction SilentlyContinue
        if ($files) {
          $files | Sort-Object Name | ForEach-Object { Write-Host "$($_.Name) ($($_.Length) bytes)" }
          
          # Check what we have
          $hasReaiDll = $files | Where-Object { $_.Name -eq "reai.dll" }
          $hasReaiLib = $files | Where-Object { $_.Name -eq "reai.lib" }
          $hasRizinPlugin = $files | Where-Object { $_.Name -like "*reai_rizin*" }
          $hasCutterPlugin = $files | Where-Object { $_.Name -like "*reai_cutter*" }
          
          Write-Host "`n=== Build Summary ==="
          Write-Host "$(if ($hasReaiDll) { '✅' } else { '❌' }) reai.dll: $(if ($hasReaiDll) { 'Found' } else { 'MISSING' })"
          Write-Host "$(if ($hasReaiLib) { '✅' } else { '❌' }) reai.lib: $(if ($hasReaiLib) { 'Found' } else { 'MISSING' })"
          Write-Host "$(if ($hasRizinPlugin) { '✅' } else { '❌' }) Rizin Plugin: $(if ($hasRizinPlugin) { 'Found' } else { 'MISSING' })"
          Write-Host "$(if ($hasCutterPlugin) { '✅' } else { '❌' }) Cutter Plugin: $(if ($hasCutterPlugin) { 'Found' } else { 'MISSING' })"
          
          if (-not $hasRizinPlugin) {
            Write-Host "❌ CRITICAL: reai_rizin plugin is missing!"
            exit 1
          }
        } else {
          Write-Host "❌ ERROR: No artifacts were collected!"
          exit 1
        }
      shell: powershell
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reai-rz-windows-binaries
        path: artifacts/
        if-no-files-found: error