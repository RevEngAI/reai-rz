name: Build macOS

on:
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Install dependencies
      run: |
        brew update
        brew install \
          cmake \
          ninja \
          pkg-config \
          python3 \
          git \
          wget \
          curl \
          qt@6
          
    - name: Install Cutter (contains bundled rizin)
      run: |
        # Detect architecture
        ARCH=$(uname -m)
        if [ "$ARCH" = "arm64" ]; then
          DMG_NAME="Cutter-v2.4.1-macOS-arm64.dmg"
        else
          DMG_NAME="Cutter-v2.4.1-macOS-x86_64.dmg"
        fi
        
        # Download Cutter DMG which contains bundled rizin
        wget -O cutter.dmg "https://github.com/rizinorg/cutter/releases/download/v2.4.1/$DMG_NAME"
        
        # Mount DMG and detect actual volume name
        hdiutil attach cutter.dmg
        
        # Find the actual mounted volume (could be "Cutter" or "Cutter v2.4.1" etc.)
        CUTTER_VOLUME=$(ls /Volumes/ | grep -i cutter | head -1)
        if [ -z "$CUTTER_VOLUME" ]; then
          echo "Error: Could not find Cutter volume after mounting"
          ls /Volumes/
          exit 1
        fi
        
        echo "Found Cutter volume: $CUTTER_VOLUME"
        
        # Install Cutter app
        cp -R "/Volumes/$CUTTER_VOLUME/Cutter.app" /Applications/
        hdiutil detach "/Volumes/$CUTTER_VOLUME"
        
        # Check what's inside the Cutter bundle
        echo "=== Cutter bundle contents ==="
        ls -la /Applications/Cutter.app/Contents/Resources/
        echo "=== Cutter lib directory ==="
        ls -la /Applications/Cutter.app/Contents/Resources/lib/ || echo "No lib directory found"
        echo "=== Cutter bin directory ==="
        ls -la /Applications/Cutter.app/Contents/Resources/bin/ || echo "No bin directory found"
        echo "=== Cutter include directory ==="
        ls -la /Applications/Cutter.app/Contents/Resources/include/ || echo "No include directory found"
        echo "=== Looking for CutterPlugin header specifically ==="
        find /Applications/Cutter.app -name "*Plugin*" -type f 2>/dev/null || echo "No plugin headers found"
        find /Applications/Cutter.app -name "*plugin*" -type f 2>/dev/null || echo "No plugin headers found"
        echo "=== Checking for cutter headers ==="
        find /Applications/Cutter.app/Contents/Resources/include -name "*.h" 2>/dev/null | grep -i plugin || echo "No plugin headers in include dir"
        echo "=== Checking CMake modules ==="
        ls -la /Applications/Cutter.app/Contents/Resources/lib/cmake/ || echo "No cmake directory found"
        
        # Add rizin from Cutter bundle to PATH and set library paths
        echo "/Applications/Cutter.app/Contents/Resources/bin" >> $GITHUB_PATH
        export PATH="/Applications/Cutter.app/Contents/Resources/bin:$PATH"
        
        # Set library paths for dynamic linking
        echo "DYLD_LIBRARY_PATH=/Applications/Cutter.app/Contents/Resources/lib:/Applications/Cutter.app/Contents/Frameworks:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
        export DYLD_LIBRARY_PATH="/Applications/Cutter.app/Contents/Resources/lib:/Applications/Cutter.app/Contents/Frameworks:$DYLD_LIBRARY_PATH"
        
        # Add lib path for pkg-config
        echo "PKG_CONFIG_PATH=/Applications/Cutter.app/Contents/Resources/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        export PKG_CONFIG_PATH="/Applications/Cutter.app/Contents/Resources/lib/pkgconfig:$PKG_CONFIG_PATH"
        
        # Verify installation with proper library paths
        echo "=== Verifying rizin installation ==="
        rizin -v
        pkg-config --cflags rz_core
        
    - name: Install Python dependencies
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        
    - name: Build and install creait
      run: |
        source .venv/bin/activate
        
        InstallPath="${HOME}/.local"
        echo "Dependencies will be installed at prefix $InstallPath"
        
        mkdir -pv "$InstallPath/lib"
        mkdir -pv "$InstallPath/include"
        
        cd /tmp
        rm -rf /tmp/creait
        git clone https://github.com/revengai/creait
        
        # Build and install creait
        cmake -S "/tmp/creait" \
            -B "/tmp/creait/Build" \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_PREFIX_PATH="$InstallPath" \
            -D CMAKE_INSTALL_PREFIX="$InstallPath"
        cmake --build "/tmp/creait/Build" --config Release
        cmake --install "/tmp/creait/Build" --prefix "$InstallPath" --config Release
        
    - name: Build project
      run: |
        source .venv/bin/activate
        
        InstallPath="${HOME}/.local"
        CutterPath="/Applications/Cutter.app/Contents/Resources"
        
        # Debug CMAKE paths
        echo "=== CMake Configuration Debug ==="
        echo "InstallPath: $InstallPath"
        echo "CutterPath: $CutterPath"
        echo "CMAKE_PREFIX_PATH will be: $InstallPath:$CutterPath"
        echo "CMAKE_MODULE_PATH will include: $CutterPath/lib/cmake"
        
        # Check if critical paths exist
        echo "=== Checking critical paths ==="
        echo "Cutter headers: $(ls -la $CutterPath/include/cutter/plugins/CutterPlugin.h 2>/dev/null || echo 'NOT FOUND')"
        echo "Cutter cmake: $(ls -la $CutterPath/lib/cmake/Cutter/ 2>/dev/null || echo 'NOT FOUND')"
        
        # Build reai-rz with both rizin and cutter plugins enabled
        cmake -S "." \
            -B "Build" \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_PREFIX_PATH="$InstallPath:$CutterPath" \
            -D CMAKE_MODULE_PATH="$CutterPath/lib/cmake" \
            -D CMAKE_INSTALL_PREFIX="$InstallPath" \
            -D BUILD_CUTTER_PLUGIN=ON \
            -D CUTTER_USE_QT6=ON \
            -D CMAKE_VERBOSE_MAKEFILE=ON \
            -D CMAKE_CXX_FLAGS="-I$CutterPath/include" \
            -D CMAKE_C_FLAGS="-I$CutterPath/include"
        
        echo "=== Starting build ==="
        cmake --build "Build" --config Release --verbose
        cmake --install "Build" --prefix "$InstallPath" --config Release
        
    - name: Collect runtime binaries
      run: |
        mkdir -p artifacts
        
        # Copy install script
        echo "=== Adding install script ==="
        cp Scripts/install-macos.sh artifacts/
        chmod +x artifacts/install-macos.sh
        cp Scripts/README.md artifacts/
        
        # Show what was built
        echo "=== Contents of $HOME/.local ==="
        find $HOME/.local -type f | head -20
        
        # Collect only shared libraries (.dylib and .so files)
        find $HOME/.local/lib -name "*.dylib*" -exec cp {} artifacts/ \; 2>/dev/null || true
        find $HOME/.local/lib -name "*.so*" -exec cp {} artifacts/ \; 2>/dev/null || true
        
        # Collect rizin plugin from rizin plugin directory
        RIZIN_PLUGIN_DIR=$(rizin -H RZ_USER_PLUGINS 2>/dev/null) || RIZIN_PLUGIN_DIR=""
        if [ -n "$RIZIN_PLUGIN_DIR" ] && [ -d "$RIZIN_PLUGIN_DIR" ]; then
          echo "=== Collecting rizin plugins from $RIZIN_PLUGIN_DIR ==="
          find "$RIZIN_PLUGIN_DIR" -name "*reai*" -exec cp {} artifacts/ \; 2>/dev/null || true
        fi
        
        # Collect cutter plugin from cutter plugin directory
        # Get cutter plugin directory from cmake or fall back to common locations
        CUTTER_PLUGIN_DIRS=(
          "$HOME/.local/lib/cutter/plugins"
          "$HOME/.local/share/cutter/plugins"
          "/usr/local/lib/cutter/plugins"
          "/usr/local/share/cutter/plugins"
          "/Applications/Cutter.app/Contents/Resources/plugins"
          "$HOME/Library/Application Support/Cutter/plugins"
        )
        
        for CUTTER_DIR in "${CUTTER_PLUGIN_DIRS[@]}"; do
          if [ -d "$CUTTER_DIR" ]; then
            echo "=== Collecting cutter plugins from $CUTTER_DIR ==="
            find "$CUTTER_DIR" -name "*reai*" -exec cp {} artifacts/ \; 2>/dev/null || true
          fi
        done
        
        # Also check build directories for plugins that might not have been installed
        echo "=== Collecting plugins from build directories ==="
        find Build -name "*reai*rizin*" -o -name "*reai*cutter*" | while read file; do
          if [ -f "$file" ]; then
            cp "$file" artifacts/ 2>/dev/null || true
            echo "Found plugin in build: $(basename $file)"
          fi
        done
        
        # Search for plugins in local installation
        find $HOME/.local -name "*reai*rizin*" -o -name "*reai*cutter*" | while read file; do
          if [ -f "$file" ]; then
            cp "$file" artifacts/ 2>/dev/null || true
            echo "Found plugin in .local: $(basename $file)"
          fi
        done
        
        # Show what we collected
        echo "=== Collected Runtime Binaries ==="
        find artifacts -type f | sort
        
        # Verify we have both plugins
        RIZIN_PLUGIN=$(find artifacts -name "*reai*rizin*" | head -1)
        CUTTER_PLUGIN=$(find artifacts -name "*reai*cutter*" | head -1)
        
        echo "=== Plugin Collection Summary ==="
        if [ -n "$RIZIN_PLUGIN" ]; then
          echo "✅ Rizin plugin found: $(basename $RIZIN_PLUGIN)"
        else
          echo "❌ Rizin plugin NOT found"
        fi
        
        if [ -n "$CUTTER_PLUGIN" ]; then
          echo "✅ Cutter plugin found: $(basename $CUTTER_PLUGIN)"
        else
          echo "❌ Cutter plugin NOT found"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reai-rz-macos-binaries
        path: artifacts/
        if-no-files-found: warn 