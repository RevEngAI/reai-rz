name: Build macOS

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Install dependencies
      run: |
        brew update
        brew install \
          cmake \
          ninja \
          pkg-config \
          python3 \
          git \
          wget \
          curl
          
    - name: Install Cutter (contains bundled rizin)
      run: |
        # Detect architecture
        ARCH=$(uname -m)
        if [ "$ARCH" = "arm64" ]; then
          DMG_NAME="Cutter-v2.4.1-macOS-arm64.dmg"
        else
          DMG_NAME="Cutter-v2.4.1-macOS-x86_64.dmg"
        fi
        
        # Download Cutter DMG which contains bundled rizin
        wget -O cutter.dmg "https://github.com/rizinorg/cutter/releases/download/v2.4.1/$DMG_NAME"
        
        # Mount DMG and install
        hdiutil attach cutter.dmg
        cp -R "/Volumes/Cutter v2.4.1/Cutter.app" /Applications/
        hdiutil detach "/Volumes/Cutter v2.4.1"
        
        # Add rizin from Cutter bundle to PATH
        echo "/Applications/Cutter.app/Contents/Resources/bin" >> $GITHUB_PATH
        export PATH="/Applications/Cutter.app/Contents/Resources/bin:$PATH"
        
        # Add lib path for pkg-config
        echo "PKG_CONFIG_PATH=/Applications/Cutter.app/Contents/Resources/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        export PKG_CONFIG_PATH="/Applications/Cutter.app/Contents/Resources/lib/pkgconfig:$PKG_CONFIG_PATH"
        
        # Verify installation
        rizin -v
        pkg-config --cflags rz_core
        
    - name: Install Python dependencies
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        
    - name: Build and install creait
      run: |
        source .venv/bin/activate
        
        InstallPath="${HOME}/.local"
        echo "Dependencies will be installed at prefix $InstallPath"
        
        mkdir -pv "$InstallPath/lib"
        mkdir -pv "$InstallPath/include"
        
        cd /tmp
        rm -rf /tmp/creait
        git clone https://github.com/revengai/creait
        
        # Build and install creait
        cmake -S "/tmp/creait" \
            -B "/tmp/creait/Build" \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_PREFIX_PATH="$InstallPath" \
            -D CMAKE_INSTALL_PREFIX="$InstallPath"
        cmake --build "/tmp/creait/Build" --config Release
        cmake --install "/tmp/creait/Build" --prefix "$InstallPath" --config Release
        
    - name: Build project
      run: |
        source .venv/bin/activate
        
        InstallPath="${HOME}/.local"
        CutterPath="/Applications/Cutter.app/Contents/Resources"
        
        # Build reai-rz with both rizin and cutter plugins enabled
        cmake -S "." \
            -B "Build" \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_PREFIX_PATH="$InstallPath:$CutterPath" \
            -D CMAKE_INSTALL_PREFIX="$InstallPath" \
            -D BUILD_CUTTER_PLUGIN=ON \
            -D CUTTER_USE_QT6=ON
        cmake --build "Build" --config Release
        cmake --install "Build" --prefix "$InstallPath" --config Release
        
    - name: Collect runtime binaries
      run: |
        mkdir -p artifacts
        
        # Show what was built
        echo "=== Contents of $HOME/.local ==="
        find $HOME/.local -type f | head -20
        
        # Collect only shared libraries (.dylib and .so files)
        find $HOME/.local/lib -name "*.dylib*" -exec cp {} artifacts/ \; 2>/dev/null || true
        find $HOME/.local/lib -name "*.so*" -exec cp {} artifacts/ \; 2>/dev/null || true
        
        # Collect rizin plugin
        PLUGIN_DIR=$(rizin -H RZ_USER_PLUGINS 2>/dev/null) || PLUGIN_DIR=""
        if [ -n "$PLUGIN_DIR" ] && [ -d "$PLUGIN_DIR" ]; then
          find "$PLUGIN_DIR" -name "*reai*" -exec cp {} artifacts/ \; 2>/dev/null || true
        fi
        
        # Also check common plugin locations
        find $HOME/.local -name "*reai*rizin*" -o -name "*reai*cutter*" | while read file; do
          if [ -f "$file" ]; then
            cp "$file" artifacts/ 2>/dev/null || true
          fi
        done
        
        # Show what we collected
        echo "=== Collected Runtime Binaries ==="
        find artifacts -type f | sort
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reai-rz-macos-binaries
        path: artifacts/
        if-no-files-found: warn 