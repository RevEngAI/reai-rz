name: Build Linux

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          python3 \
          python3-pip \
          python3-venv \
          python3-yaml \
          git \
          wget \
          curl \
          libcurl4-openssl-dev \
          fuse \
          libfuse2 \
          ca-certificates \
          python3-dev
          
    - name: Install Cutter (contains bundled rizin)
      run: |
        # Download Cutter AppImage which contains bundled rizin
        wget -O cutter.AppImage https://github.com/rizinorg/cutter/releases/download/v2.4.1/Cutter-v2.4.1-Linux-x86_64.AppImage
        chmod +x cutter.AppImage
        
        # Extract AppImage to access bundled rizin and development files
        ./cutter.AppImage --appimage-extract
        
        # Install to system locations
        sudo cp -r squashfs-root/usr/* /usr/local/
        sudo ldconfig
        
        # Verify installation
        rizin -v
        pkg-config --cflags rz_core
        
    - name: Install Python dependencies
      run: |
        # Use system Python to avoid SSL issues from AppImage Python
        /usr/bin/python3 -m venv .venv
        source .venv/bin/activate
        
        # Verify we have SSL support
        python -c "import ssl; print('SSL support available')"
        
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        
    - name: Build and install creait
      run: |
        source .venv/bin/activate
        
        InstallPath="${HOME}/.local"
        echo "Dependencies will be installed at prefix $InstallPath"
        
        mkdir -pv "$InstallPath/lib"
        mkdir -pv "$InstallPath/include"
        
        cd /tmp
        rm -rf /tmp/creait
        git clone https://github.com/revengai/creait
        
        # Build and install creait
        cmake -S "/tmp/creait" \
            -B "/tmp/creait/Build" \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_PREFIX_PATH="$InstallPath" \
            -D CMAKE_INSTALL_PREFIX="$InstallPath"
        cmake --build "/tmp/creait/Build" --config Release
        cmake --install "/tmp/creait/Build" --prefix "$InstallPath" --config Release
        
    - name: Build project
      run: |
        source .venv/bin/activate
        
        InstallPath="${HOME}/.local"
        
        # Build reai-rz with both rizin and cutter plugins enabled
        cmake -S "." \
            -B "Build" \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_PREFIX_PATH="$InstallPath:/usr/local" \
            -D CMAKE_INSTALL_PREFIX="$InstallPath" \
            -D BUILD_CUTTER_PLUGIN=ON \
            -D CUTTER_USE_QT6=ON
        cmake --build "Build" --config Release
        cmake --install "Build" --prefix "$InstallPath" --config Release
        
    - name: Collect runtime binaries
      run: |
        mkdir -p artifacts
        
        # Show what was built
        echo "=== Contents of $HOME/.local ==="
        find $HOME/.local -type f | head -20
        
        # Collect only shared libraries (.so files)
        find $HOME/.local/lib -name "*.so*" -exec cp {} artifacts/ \; 2>/dev/null || true
        
        # Collect rizin plugin
        PLUGIN_DIR=$(rizin -H RZ_USER_PLUGINS 2>/dev/null) || PLUGIN_DIR=""
        if [ -n "$PLUGIN_DIR" ] && [ -d "$PLUGIN_DIR" ]; then
          find "$PLUGIN_DIR" -name "*reai*" -exec cp {} artifacts/ \; 2>/dev/null || true
        fi
        
        # Also check common plugin locations
        find $HOME/.local -name "*reai*rizin*" -o -name "*reai*cutter*" | while read file; do
          if [ -f "$file" ]; then
            cp "$file" artifacts/ 2>/dev/null || true
          fi
        done
        
        # Show what we collected
        echo "=== Collected Runtime Binaries ==="
        find artifacts -type f | sort
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reai-rz-linux-binaries
        path: artifacts/
        if-no-files-found: warn 