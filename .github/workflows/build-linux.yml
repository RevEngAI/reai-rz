name: Build Linux

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          python3 \
          python3-pip \
          python3-venv \
          python3-yaml \
          git \
          wget \
          curl \
          libcurl4-openssl-dev \
          fuse \
          libfuse2 \
          ca-certificates \
          python3-dev \
          qt6-base-dev \
          qt6-tools-dev \
          qt6-tools-dev-tools \
          libqt6core6 \
          libqt6gui6 \
          libqt6widgets6 \
          libqt6svg6-dev \
          libqt6svg6 \
          libqt6opengl6-dev \
          libqt6opengl6 \
          qt6-5compat-dev \
          libqt6core5compat6 \
          libxkbcommon-dev
          
    - name: Install Cutter (contains bundled rizin)
      run: |
        # Download Cutter AppImage which contains bundled rizin
        wget -O cutter.AppImage https://github.com/rizinorg/cutter/releases/download/v2.4.1/Cutter-v2.4.1-Linux-x86_64.AppImage
        chmod +x cutter.AppImage
        
        # Extract AppImage to access bundled rizin and development files
        ./cutter.AppImage --appimage-extract
        
        # Install to system locations
        sudo cp -r squashfs-root/usr/* /usr/local/
        sudo ldconfig
        
        # Debug: Check what Cutter headers are available
        echo "=== Checking Cutter installation ==="
        echo "Cutter include directory:"
        ls -la /usr/local/include/cutter/ 2>/dev/null || echo "No cutter headers found"
        echo "Looking for CutterPlugin headers:"
        find /usr/local/include -name "*Plugin*" -o -name "*plugin*" 2>/dev/null || echo "No plugin headers found"
        echo "Cutter cmake modules:"
        ls -la /usr/local/lib/cmake/Cutter/ 2>/dev/null || echo "No Cutter cmake modules found"
        
        # Verify installation
        rizin -v
        pkg-config --cflags rz_core
        
    - name: Install Python dependencies
      run: |
        # Use system Python to avoid SSL issues from AppImage Python
        /usr/bin/python3 -m venv .venv
        source .venv/bin/activate
        
        # Verify we have SSL support
        python -c "import ssl; print('SSL support available')"
        
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        
    - name: Build and install creait
      run: |
        source .venv/bin/activate
        
        InstallPath="${HOME}/.local"
        echo "Dependencies will be installed at prefix $InstallPath"
        
        mkdir -pv "$InstallPath/lib"
        mkdir -pv "$InstallPath/include"
        
        cd /tmp
        rm -rf /tmp/creait
        git clone https://github.com/revengai/creait
        
        # Build and install creait
        cmake -S "/tmp/creait" \
            -B "/tmp/creait/Build" \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_PREFIX_PATH="$InstallPath" \
            -D CMAKE_INSTALL_PREFIX="$InstallPath"
        cmake --build "/tmp/creait/Build" --config Release
        cmake --install "/tmp/creait/Build" --prefix "$InstallPath" --config Release
        
    - name: Build project
      run: |
        source .venv/bin/activate
        
        InstallPath="${HOME}/.local"
        
        # Debug: Check paths before building
        echo "=== Build Configuration Debug ==="
        echo "CMAKE_PREFIX_PATH will be: $InstallPath:/usr/local"
        echo "Checking Cutter headers accessibility:"
        echo "CutterPlugin.h: $(ls -la /usr/local/include/cutter/plugins/CutterPlugin.h 2>/dev/null || echo 'NOT FOUND')"
        echo "Cutter cmake: $(ls -la /usr/local/lib/cmake/Cutter/ 2>/dev/null || echo 'NOT FOUND')"
        
        # Build reai-rz with both rizin and cutter plugins enabled
        cmake -S "." \
            -B "Build" \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_PREFIX_PATH="$InstallPath:/usr/local" \
            -D CMAKE_INSTALL_PREFIX="$InstallPath" \
            -D BUILD_CUTTER_PLUGIN=ON \
            -D CUTTER_USE_QT6=ON \
            -D CMAKE_VERBOSE_MAKEFILE=ON
        
        echo "=== Starting build ==="
        cmake --build "Build" --config Release --verbose
        cmake --install "Build" --prefix "$InstallPath" --config Release
        
    - name: Collect runtime binaries
      run: |
        mkdir -p artifacts
        
        # Show what was built
        echo "=== Contents of $HOME/.local ==="
        find $HOME/.local -type f | head -20
        
        # Collect only shared libraries (.so files)
        find $HOME/.local/lib -name "*.so*" -exec cp {} artifacts/ \; 2>/dev/null || true
        
        # Collect rizin plugin from rizin plugin directory
        RIZIN_PLUGIN_DIR=$(rizin -H RZ_USER_PLUGINS 2>/dev/null) || RIZIN_PLUGIN_DIR=""
        if [ -n "$RIZIN_PLUGIN_DIR" ] && [ -d "$RIZIN_PLUGIN_DIR" ]; then
          echo "=== Collecting rizin plugins from $RIZIN_PLUGIN_DIR ==="
          find "$RIZIN_PLUGIN_DIR" -name "*reai*" -exec cp {} artifacts/ \; 2>/dev/null || true
        fi
        
        # Collect cutter plugin from cutter plugin directory
        # Get cutter plugin directory from cmake or fall back to common locations
        CUTTER_PLUGIN_DIRS=(
          "$HOME/.local/lib/cutter/plugins"
          "$HOME/.local/share/cutter/plugins"
          "/usr/local/lib/cutter/plugins"
          "/usr/local/share/cutter/plugins"
          "/Applications/Cutter.app/Contents/Resources/plugins"
        )
        
        for CUTTER_DIR in "${CUTTER_PLUGIN_DIRS[@]}"; do
          if [ -d "$CUTTER_DIR" ]; then
            echo "=== Collecting cutter plugins from $CUTTER_DIR ==="
            find "$CUTTER_DIR" -name "*reai*" -exec cp {} artifacts/ \; 2>/dev/null || true
          fi
        done
        
        # Also check build directories for plugins that might not have been installed
        echo "=== Collecting plugins from build directories ==="
        find Build -name "*reai*rizin*" -o -name "*reai*cutter*" | while read file; do
          if [ -f "$file" ]; then
            cp "$file" artifacts/ 2>/dev/null || true
            echo "Found plugin in build: $(basename $file)"
          fi
        done
        
        # Search for plugins in local installation
        find $HOME/.local -name "*reai*rizin*" -o -name "*reai*cutter*" | while read file; do
          if [ -f "$file" ]; then
            cp "$file" artifacts/ 2>/dev/null || true
            echo "Found plugin in .local: $(basename $file)"
          fi
        done
        
        # Show what we collected
        echo "=== Collected Runtime Binaries ==="
        find artifacts -type f | sort
        
        # Verify we have both plugins
        RIZIN_PLUGIN=$(find artifacts -name "*reai*rizin*" | head -1)
        CUTTER_PLUGIN=$(find artifacts -name "*reai*cutter*" | head -1)
        
        echo "=== Plugin Collection Summary ==="
        if [ -n "$RIZIN_PLUGIN" ]; then
          echo "✅ Rizin plugin found: $(basename $RIZIN_PLUGIN)"
        else
          echo "❌ Rizin plugin NOT found"
        fi
        
        if [ -n "$CUTTER_PLUGIN" ]; then
          echo "✅ Cutter plugin found: $(basename $CUTTER_PLUGIN)"
        else
          echo "❌ Cutter plugin NOT found"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reai-rz-linux-binaries
        path: artifacts/
        if-no-files-found: warn 